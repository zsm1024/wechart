<?xml version="1.0" encoding="UTF-8"?>  
<!--  
-scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true  
-scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。  
-           当scan为true时，此属性生效。默认的时间间隔为1分钟  
-debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。  
- configuration 子节点为 appender、logger、root  
-->  
<configuration scan="true" scanPeriod="60 second" debug="false">  
    <!-- 负责写日志,控制台日志 -->  
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">  
        <!-- 一是把日志信息转换成字节数组,二是把字节数组写入到输出流 -->  
        <encoder>  
            <Pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%5level] [%thread] %logger{36} - %msg%n</Pattern>  
            <charset>UTF-8</charset>  
        </encoder>  
    </appender>  
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->  
    <appender name="FILEAPPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
    	<file>c:/testlog/test.log</file>   
        <encoder>  
            <Pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%5level] [%thread] %logger{36} - %msg%n</Pattern>  
            <charset>UTF-8</charset>  
        </encoder>  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
            <!-- 每天生成一个日志文件，保存30天的日志文件  
            - 如果隔一段时间没有输出日志，前面过期的日志不会被删除，只有再重新打印日志的时候，会触发删除过期日志的操作。  
            -->
            <fileNamePattern>c:/my
            log-%d{yyyy-MM-dd_HH-mm}.%i.log</fileNamePattern>  
            <maxHistory>30</maxHistory>  
            <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">  
                <maxFileSize>20MB</maxFileSize>  
            </TimeBasedFileNamingAndTriggeringPolicy>  
        </rollingPolicy>
    </appender >
    <!--
    - 1.将级别为“INFO”及大于“INFO”的日志信息交给此loger指定的名为“STDOUT”的appender处理，在控制台中打出日志，  
    -   不再向次loger的上级 <logger name="logback"/> 传递打印信息  
    - 2.level：设置打印级别（TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF），还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。  
    -        如果未设置此属性，那么当前loger将会继承上级的级别。  
    - 3.additivity：为false，表示此loger的打印信息不再向上级传递,如果设置为true，会打印两次  
    - 4.appender-ref：指定了名字为"STDOUT"的appender。  
   
   	-->  
    <logger name="org.springframework" level="ERROR" additivity="false">  
        <appender-ref ref="STDOUT"/>  
        <appender-ref ref="FILEAPPENDER"/>  
    </logger>  
    <logger name="org.hibernate" level="ERROR" additivity="false">  
        <appender-ref ref="STDOUT"/>  
        <appender-ref ref="FILEAPPENDER"/>  
    </logger>
    <logger name="org.apache.cxf" level="ERROR" additivity="false">  
        <appender-ref ref="STDOUT"/>  
        <appender-ref ref="FILEAPPENDER"/>  
    </logger>
    <!--  
    - 根logger  
    - level:设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。  
    -       默认是DEBUG。  
    -appender-ref:可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger  
    -->  
    <root level="DEBUG">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILEAPPENDER"/>
    </root>  
</configuration> 